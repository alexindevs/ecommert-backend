{"clientVersion":"5.7.1","level":"error","message":"\nInvalid `this.prisma.user.findUnique()` invocation in\n/home/alexin/Desktop/projects/ecommert-backend/src/modules/auth/auth.repository.ts:60:29\n\n  57 }\n  58 \n  59 async getUserByUsername(username: string): Promise<PrismaUser | null> {\n→ 60   return this.prisma.user.findUnique(\nCan't reach database server at `dpg-cm2ak9vqd2ns73bdvfrg-a.oregon-postgres.render.com`:`5432`\n\nPlease make sure your database server is running at `dpg-cm2ak9vqd2ns73bdvfrg-a.oregon-postgres.render.com`:`5432`. \nInvalid `this.prisma.user.findUnique()` invocation in\n/home/alexin/Desktop/projects/ecommert-backend/src/modules/auth/auth.repository.ts:60:29\n\n  57 }\n  58 \n  59 async getUserByUsername(username: string): Promise<PrismaUser | null> {\n→ 60   return this.prisma.user.findUnique(\nCan't reach database server at `dpg-cm2ak9vqd2ns73bdvfrg-a.oregon-postgres.render.com`:`5432`\n\nPlease make sure your database server is running at `dpg-cm2ak9vqd2ns73bdvfrg-a.oregon-postgres.render.com`:`5432`.","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `this.prisma.user.findUnique()` invocation in\n/home/alexin/Desktop/projects/ecommert-backend/src/modules/auth/auth.repository.ts:60:29\n\n  57 }\n  58 \n  59 async getUserByUsername(username: string): Promise<PrismaUser | null> {\n→ 60   return this.prisma.user.findUnique(\nCan't reach database server at `dpg-cm2ak9vqd2ns73bdvfrg-a.oregon-postgres.render.com`:`5432`\n\nPlease make sure your database server is running at `dpg-cm2ak9vqd2ns73bdvfrg-a.oregon-postgres.render.com`:`5432`.\n    at si.handleRequestError (/home/alexin/Desktop/projects/ecommert-backend/node_modules/@prisma/client/runtime/library.js:125:7117)\n    at si.handleAndLogRequestError (/home/alexin/Desktop/projects/ecommert-backend/node_modules/@prisma/client/runtime/library.js:125:6151)\n    at si.request (/home/alexin/Desktop/projects/ecommert-backend/node_modules/@prisma/client/runtime/library.js:125:5859)\n    at async l (/home/alexin/Desktop/projects/ecommert-backend/node_modules/@prisma/client/runtime/library.js:130:10025)\n    at async AuthService.loginUser (/home/alexin/Desktop/projects/ecommert-backend/src/modules/auth/auth.service.ts:88:18)\n    at async AuthController.loginUser (/home/alexin/Desktop/projects/ecommert-backend/src/modules/auth/auth.controller.ts:25:22)"}
{"clientVersion":"5.7.1","level":"error","message":"\nInvalid `this.prisma.user.findUnique()` invocation in\n/home/alexin/Desktop/projects/ecommert-backend/src/modules/auth/auth.repository.ts:60:29\n\n  57 }\n  58 \n  59 async getUserByUsername(username: string): Promise<PrismaUser | null> {\n→ 60   return this.prisma.user.findUnique({\n         where: {\n           username: undefined,\n       ?   id?: Int,\n       ?   email?: String,\n       ?   AND?: UserWhereInput | UserWhereInput[],\n       ?   OR?: UserWhereInput[],\n       ?   NOT?: UserWhereInput | UserWhereInput[],\n       ?   password?: StringFilter | String,\n       ?   firstName?: StringFilter | String,\n       ?   lastName?: StringFilter | String,\n       ?   isAdmin?: BoolFilter | Boolean,\n       ?   isBlocked?: BoolFilter | Boolean,\n       ?   isVerified?: BoolFilter | Boolean,\n       ?   profileImage?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   reviews?: ReviewListRelationFilter,\n       ?   refreshTokens?: RefreshTokenListRelationFilter,\n       ?   profile?: ProfileNullableRelationFilter | ProfileWhereInput | Null,\n       ?   products?: ProductListRelationFilter,\n       ?   cart?: CartNullableRelationFilter | CartWhereInput | Null\n         }\n       })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `username` or `email` arguments. Available options are marked with ?. \nInvalid `this.prisma.user.findUnique()` invocation in\n/home/alexin/Desktop/projects/ecommert-backend/src/modules/auth/auth.repository.ts:60:29\n\n  57 }\n  58 \n  59 async getUserByUsername(username: string): Promise<PrismaUser | null> {\n→ 60   return this.prisma.user.findUnique({\n         where: {\n           username: undefined,\n       ?   id?: Int,\n       ?   email?: String,\n       ?   AND?: UserWhereInput | UserWhereInput[],\n       ?   OR?: UserWhereInput[],\n       ?   NOT?: UserWhereInput | UserWhereInput[],\n       ?   password?: StringFilter | String,\n       ?   firstName?: StringFilter | String,\n       ?   lastName?: StringFilter | String,\n       ?   isAdmin?: BoolFilter | Boolean,\n       ?   isBlocked?: BoolFilter | Boolean,\n       ?   isVerified?: BoolFilter | Boolean,\n       ?   profileImage?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   reviews?: ReviewListRelationFilter,\n       ?   refreshTokens?: RefreshTokenListRelationFilter,\n       ?   profile?: ProfileNullableRelationFilter | ProfileWhereInput | Null,\n       ?   products?: ProductListRelationFilter,\n       ?   cart?: CartNullableRelationFilter | CartWhereInput | Null\n         }\n       })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `username` or `email` arguments. Available options are marked with ?.","name":"PrismaClientValidationError","stack":"PrismaClientValidationError: \nInvalid `this.prisma.user.findUnique()` invocation in\n/home/alexin/Desktop/projects/ecommert-backend/src/modules/auth/auth.repository.ts:60:29\n\n  57 }\n  58 \n  59 async getUserByUsername(username: string): Promise<PrismaUser | null> {\n→ 60   return this.prisma.user.findUnique({\n         where: {\n           username: undefined,\n       ?   id?: Int,\n       ?   email?: String,\n       ?   AND?: UserWhereInput | UserWhereInput[],\n       ?   OR?: UserWhereInput[],\n       ?   NOT?: UserWhereInput | UserWhereInput[],\n       ?   password?: StringFilter | String,\n       ?   firstName?: StringFilter | String,\n       ?   lastName?: StringFilter | String,\n       ?   isAdmin?: BoolFilter | Boolean,\n       ?   isBlocked?: BoolFilter | Boolean,\n       ?   isVerified?: BoolFilter | Boolean,\n       ?   profileImage?: StringNullableFilter | String | Null,\n       ?   createdAt?: DateTimeFilter | DateTime,\n       ?   updatedAt?: DateTimeFilter | DateTime,\n       ?   reviews?: ReviewListRelationFilter,\n       ?   refreshTokens?: RefreshTokenListRelationFilter,\n       ?   profile?: ProfileNullableRelationFilter | ProfileWhereInput | Null,\n       ?   products?: ProductListRelationFilter,\n       ?   cart?: CartNullableRelationFilter | CartWhereInput | Null\n         }\n       })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id`, `username` or `email` arguments. Available options are marked with ?.\n    at ti (/home/alexin/Desktop/projects/ecommert-backend/node_modules/@prisma/client/runtime/library.js:118:5888)\n    at si.handleRequestError (/home/alexin/Desktop/projects/ecommert-backend/node_modules/@prisma/client/runtime/library.js:125:6473)\n    at si.handleAndLogRequestError (/home/alexin/Desktop/projects/ecommert-backend/node_modules/@prisma/client/runtime/library.js:125:6151)\n    at si.request (/home/alexin/Desktop/projects/ecommert-backend/node_modules/@prisma/client/runtime/library.js:125:5859)\n    at async l (/home/alexin/Desktop/projects/ecommert-backend/node_modules/@prisma/client/runtime/library.js:130:10025)\n    at async AuthService.loginUser (/home/alexin/Desktop/projects/ecommert-backend/src/modules/auth/auth.service.ts:88:18)\n    at async AuthController.loginUser (/home/alexin/Desktop/projects/ecommert-backend/src/modules/auth/auth.controller.ts:25:22)"}
{"clientVersion":"5.7.1","level":"error","name":"PrismaClientValidationError"}
{"level":"error","message":"\nInvalid `prisma.product.create()` invocation in\n/home/alexin/Desktop/projects/ecommert-backend/src/modules/products/product.repository.ts:21:31\n\n  18 }\n  19 \n  20 async addProduct(product: ProductInput): Promise<Product> {\n→ 21     return prisma.product.create({\n           data: {\n             createdAt: new Date(\"2024-03-01T14:52:46.237Z\"),\n             name: \"Wallpaper\",\n             description: \"A nice wallpaper for any backend girlie.\",\n             price: \"2000\",\n                    ~~~~~~\n             stock: \"40\",\n             userId: \"1\",\n             image: \"https://res.cloudinary.com/db797lmh6/image/upload/v1709304765/ecommert/1709304762276-804f8f4d-87d8-4c19-ad43-ed715ed68b4f.png\"\n           }\n         })\n\nArgument `price`: Invalid value provided. Expected Float, provided String."}
{"clientVersion":"5.7.1","level":"error","name":"PrismaClientValidationError"}
{"level":"error","message":"\nInvalid `prisma.product.create()` invocation in\n/home/alexin/Desktop/projects/ecommert-backend/src/modules/products/product.repository.ts:21:31\n\n  18 }\n  19 \n  20 async addProduct(product: ProductInput): Promise<Product> {\n→ 21     return prisma.product.create({\n           data: {\n             createdAt: new Date(\"2024-03-01T14:57:13.833Z\"),\n             name: \"Wallpaper\",\n             description: \"A nice wallpaper for any backend girlie.\",\n             price: 2000,\n             stock: \"40\",\n                    ~~~~\n             userId: \"1\",\n             image: \"https://res.cloudinary.com/db797lmh6/image/upload/v1709305032/ecommert/1709305030038-ab96d1fb-5ede-47f4-bc71-44bf5183bb7b.png\"\n           }\n         })\n\nArgument `stock`: Invalid value provided. Expected Int, provided String."}
{"clientVersion":"5.7.1","level":"error","name":"PrismaClientValidationError"}
{"level":"error","message":"\nInvalid `prisma.product.create()` invocation in\n/home/alexin/Desktop/projects/ecommert-backend/src/modules/products/product.repository.ts:21:31\n\n  18 }\n  19 \n  20 async addProduct(product: ProductInput): Promise<Product> {\n→ 21     return prisma.product.create({\n           data: {\n             createdAt: new Date(\"2024-03-01T14:59:41.777Z\"),\n             name: \"Wallpaper\",\n             description: \"A nice wallpaper for any backend girlie.\",\n             price: 2000,\n             stock: 40,\n             userId: \"1\",\n                     ~~~\n             image: \"https://res.cloudinary.com/db797lmh6/image/upload/v1709305181/ecommert/1709305178322-a057cce5-29c7-4a19-9963-1f0e3cc24394.png\"\n           }\n         })\n\nArgument `userId`: Invalid value provided. Expected Int, provided String."}
